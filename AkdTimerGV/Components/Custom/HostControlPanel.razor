@using AkdTimerGV.Components.Models
@rendermode InteractiveServer
@inject ILogger<HostControlPanel> Logger

@*
    Custom Component to offer the Host some additional controls:
    Global Pause, Global Reset, Starting Pistol, Add Break To All.
*@

<div class="Panel d-flex flex-column flex-justify">
    <div class="accordion" id="accordion" style="width:100%">
        <div class="accordion-item">
            <div class="accordion-header" style="width:350px" id="headingOne">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
                    Timer Control
                </button>
            </div>

            <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordion">
                <div class="accordion-body">
                    <div style="width: 100%" class="Panel d-flex form-inline justify-content-between">
                        <div class="input-group mb-3">
                            <input type="button" class="btn btn-success form-control input-group-text" value="Starting Pistol" onclick="@(() => StartingPistol())" disabled="@Lobby.Started"/>
                            <input type="number" class="form-control input-group-text" style="max-width: 80px" @bind="StartingPistolDuration" disabled="@Lobby.Started"/>
                            <span class="form-control input-group-text"> Seconds</span>
                        </div>
                    </div>
                    <hr />
                    <div class="d-flex flex-row justify-content-around">
                        <input type="button" class="btn btn-info flex-fill" value="Global Pause" onclick="@(() => Lobby.PauseAll())"  disabled="@(!Lobby.Started)"/>
                        <input type="button" class="btn btn-danger flex-fill" value="Global Reset" onclick="@(() => Lobby.GlobalReset())"/>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="accordion-item">
            <div class="accordion-header" id="headingTwo">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                    Add Break
                </button>
            </div>
            <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#accordion">
                <div class="accordion-body">
                    <AddToTimer Disabled="false" TimerAdditionType="@TimerAdditionType.Break" TimerData="@(() => GetRelevantTimerData())"/>
                </div>
            </div>
        </div>

        <div class="accordion-item">
            <div class="accordion-header" id="headingThree">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                    Add Penalty
                </button>
            </div>

            <div id="collapseThree" class="accordion-collapse collapse" aria-labelledby="headingThree" data-bs-parent="#accordion">
                <div class="accordion-body">
                    <InputSelect name="AddPenaltySelect" class="dropdown btn btn-dark dropdown-toggle" style="border:var(--bs-border-width) solid var(--bs-border-color);" @bind-value="SelectedUserAddPenalty">
                        <option value="@Guid.Empty">Select Team</option>
                        @foreach (var team in Lobby.GetParticipatingTeams()) {
                        <option value="@team.TeamId">@team.Name</option>
                        }
                    </InputSelect>
                    <AddToTimer Disabled="false" TimerAdditionType="@TimerAdditionType.Penalty" 
                    TimerData="@(() => GetTimersToChange())"
                    Origin="HostControl"/>
                </div>
            </div>
        </div>
        <div class="accordion-item">
            <div class="accordion-header" id="headingFour">
                <button class="accordion-button collapsed" type="button">
                    <span><input type="checkbox" class="btn" @bind="ResumeRace" @bind:after="ToggleResume"/> Resumed Race</span>
                </button>
            </div>
        </div>

        <div class="accordion-item">
            <div class="accordion-header" id="headingFive">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseFive" aria-expanded="false" aria-controls="collapseFive">
                    Change Host
                </button>
            </div>

            <div id="collapseFive" class="accordion-collapse collapse" aria-labelledby="headingFive" data-bs-parent="#accordion">
                <div class="accordion-body">
                    <InputSelect name="NewHostSelect" @bind-value="SelectedNewHost">
                        <option value="@Guid.Empty">Select User</option>
                        @foreach (var user in Lobby.GetUsersExceptHost()) {
                            <option value="@user.UserId">@user.Name</option>
                        }
                    </InputSelect>
                    <input type="button" value="Make Host" onclick="@(() => ConfirmationModal.showDialog())"/>
                </div>
            </div>
        </div>
    </div>

    <ConfirmationModal @ref="ConfirmationModal"
        ActionDescription="Are you sure you want to handover host controls to the selected user?"
        ActionRunnable="@(() => HandoverHostControls())"/>

</div>

@code {
    [Parameter]
    public Lobby Lobby { get; set; }

    public bool ResumeRace { get; set; }

    private int StartingPistolDuration { get; set; } = 5;

    protected Timer? timer;

    private ConfirmationModal ConfirmationModal  { get; set; }

    private Guid SelectedNewHost { get; set; }
    private Guid? SelectedUserAddPenalty { get; set; }

    private List<TeamTimerData> GetRelevantTimerData() {
        return new List<TeamTimerData>(Lobby.GetParticipatingTeams().Select(Team => Team.TimerData));
    }

    private void StartingPistol() {
        Lobby.StartingPistolValue = StartingPistolDuration;
        var autoEvent = new AutoResetEvent(false);

        // Some more cursed tech, adds a timer on this class, but also passes this class as a parameter into the timer.
        // The Objective is to every 0.1 seconds set the Starting Pistol value on the Lobby Object, 
        // so that each client is updated, and then once the timer is done, we dispose of it.
        timer = new Timer(new TimerCallback(panel => {
            InvokeAsync(() => {
                if (((HostControlPanel) panel).Lobby.StartingPistolValue <= 0.1) {
                    ((HostControlPanel) panel).Lobby.StartingPistolValue = 0;
                    ((HostControlPanel) panel).Lobby.Started = true;
                    ((HostControlPanel) panel).timer.Dispose();
                    Lobby.StartAllTimers();
                    return;
                }
                Lobby.StartingPistolValue -= 0.1;
            });
        }
        ), this, 100, 100);
    }

    private void ToggleResume() {
        Lobby.ResumedRace = this.ResumeRace;

        if (!Lobby.ResumedRace) {
            Lobby.GetParticipatingTeams().ForEach(team => team.TimerData.PreviousTime = 0);
        }
    }

    private void HandoverHostControls() {
        if (Guid.Empty == SelectedNewHost) {
            Logger.LogInformation("User didn't make a selection");
            return;
        }

        User? newHost = UserHolder.GetUserById(SelectedNewHost);

        if (newHost == null) {
            Logger.LogInformation("User {newHost} is Null, didn't find user for {SelectedNewHost}", newHost, SelectedNewHost);
            return;
        }

        Lobby.Owner = newHost;
        StateHasChanged();
    }

    private List<TeamTimerData> GetTimersToChange(){
        return SelectedUserAddPenalty == Guid.Empty ? new List<TeamTimerData>() : new List<TeamTimerData>() { Lobby.GetTeamByTeamId((Guid)SelectedUserAddPenalty).TimerData };    
    }
}