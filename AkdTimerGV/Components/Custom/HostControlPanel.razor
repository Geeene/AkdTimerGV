@using AkdTimerGV.Components.Models
@rendermode InteractiveServer
@inject ILogger<HostControlPanel> Logger

@*
    Custom Component to offer the Host some additional controls:
    Global Pause, Global Reset, Starting Pistol, Add Break To All.
*@

<div class="Panel d-flex flex-column flex-justify">
    <span>Host Controls</span>
    <div style="margin-top: 10px;">
        <input type="button" class="btn btn-light" value="Global Reset" onclick="@(() => Lobby.GlobalReset())"/>
        <input type="button" class="btn btn-light" value="Global Pause" onclick="@(() => Lobby.PauseAll())"  disabled="@(!Lobby.Started)"/>
    </div>
    <br />
    <div style="margin-top: 10px;" class="Panel d-flex flex-row">
        <input type="number" class="input-group-text" style="width: 80px" @bind="StartingPistolDuration" disabled="@Lobby.Started"/>
        <label style="margin: 0px 5px 0px 5px"> Seconds</label>
        <input type="button" class="btn btn-light" value="Starting Pistol" onclick="@(() => StartingPistol())" disabled="@Lobby.Started"/>
    </div>

    <hr />
    <span>
        <InputSelect name="AddPenaltySelect" @bind-value="SelectedUserAddPenalty">
            <option value="@Guid.Empty">Add Penalty to Team</option>
            @foreach (var team in Lobby.GetParticipatingTeams()) {
                <option value="@team.TeamId">@team.Name</option>
            }
        </InputSelect>
        <AddToTimer Disabled="false" TimerAdditionType="@TimerAdditionType.Penalty" 
            TimerData="@(() => (new List<TeamTimerData> () {Lobby.GetTeamByTeamId(SelectedUserAddPenalty).TimerData}))"/>
    </span>
    <hr />
    <span><input type="checkbox" class="btn" @bind="ResumeRace" @bind:after="ToggleResume"/> Resumed Race</span>
    @if (Lobby.ResumedRace) {
        <AddToTimer Disabled="false" TimerAdditionType="@TimerAdditionType.Break" TimerData="@(() => GetRelevantTimerData())"/>
    }
    <hr />
        <span>
        <InputSelect name="NewHostSelect" @bind-value="SelectedNewHost">
            <option value="@Guid.Empty">Select the new Host</option>
            @foreach (var user in Lobby.GetUsersExceptHost()) {
                <option value="@user.UserId">@user.Name</option>
            }
        </InputSelect>
        <input type="button" value="Make Host" onclick="@(() => ConfirmationModal.showDialog())"/>
    </span>

    <ConfirmationModal @ref="ConfirmationModal"
        ActionDescription="Are you sure you want to handover host controls to the selected user?"
        ActionRunnable="@(() => HandoverHostControls())"/>

</div>

@code {
    [Parameter]
    public Lobby Lobby { get; set; }

    public bool ResumeRace { get; set; }

    private int StartingPistolDuration { get; set; } = 5;

    protected Timer? timer;

    private ConfirmationModal ConfirmationModal  { get; set; }

    private Guid SelectedNewHost { get; set; }
    private Guid SelectedUserAddPenalty { get; set; }

    private List<TeamTimerData> GetRelevantTimerData() {
        return new List<TeamTimerData>(Lobby.GetParticipatingTeams().Select(Team => Team.TimerData));
    }

    private void StartingPistol() {
        Lobby.StartingPistolValue = StartingPistolDuration;
        var autoEvent = new AutoResetEvent(false);

        // Some more cursed tech, adds a timer on this class, but also passes this class as a parameter into the timer.
        // The Objective is to every 0.1 seconds set the Starting Pistol value on the Lobby Object, 
        // so that each client is updated, and then once the timer is done, we dispose of it.
        timer = new Timer(new TimerCallback(panel => {
            InvokeAsync(() => {
                if (((HostControlPanel) panel).Lobby.StartingPistolValue <= 0.1) {
                    ((HostControlPanel) panel).Lobby.StartingPistolValue = 0;
                    ((HostControlPanel) panel).Lobby.Started = true;
                    ((HostControlPanel) panel).timer.Dispose();
                    Lobby.StartAllTimers();
                    return;
                }
                Lobby.StartingPistolValue -= 0.1;
            });
        }
        ), this, 100, 100);
    }

    private void ToggleResume() {
        Lobby.ResumedRace = this.ResumeRace;

        if (!Lobby.ResumedRace) {
            Lobby.GetParticipatingTeams().ForEach(team => team.TimerData.PreviousTime = 0);
        }
    }

    private void HandoverHostControls() {
        if (Guid.Empty == SelectedNewHost) {
            Logger.LogInformation("User didn't make a selection");
            return;
        }

        User? newHost = UserHolder.GetUserById(SelectedNewHost);

        if (newHost == null) {
            Logger.LogInformation("User {newHost} is Null, didn't find user for {SelectedNewHost}", newHost, SelectedNewHost);
            return;
        }

        Lobby.Owner = newHost;
        StateHasChanged();
    }
}