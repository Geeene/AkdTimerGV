@using AkdTimerGV.Components.Models

@*
Custom component which lets Members of a team control their Teams Timer.

Start / Stop Timer
Start / Stop Break
Add Penalty
*@

<div class="TimerControlPanel d-flex flex-row justify-content-around" style="width:100%">
    @*Allow team to start / stop their Timer / Break *@
    <div class="d-flex flex-column Panel">
        <span>Timer Control</span>
        @if (!timerData.Active && !timerData.dnf) {
            <input type="button" class="btn btn-success" disabled="@(Disabled)" value="Start" onclick="@(() => HandleStart())"/>
        } else {
            <input type="button" class="btn btn-success" disabled="@(Disabled)" value="Stop" onclick="@(() => HandleFinish())"/>
            <input type="button" class="btn btn-danger" disabled="@(Disabled)" value="DNF" onclick="@(() => ConfirmationModal.showDialog())"/>
        }
        <input type="button" class="btn btn-light" disabled="@(timerData.Paused || Disabled)" value="Start Break" onclick="@(() => timerData.StartBreak())"/>
        <input type="button" class="btn btn-light" disabled="@(timerData.IsNotPaused() || Disabled)" value="End Break" onclick="@(() => timerData.EndBreak())"/>
    </div>

    @*Allow team to Add Penalty time *@
    <div class="d-flex flex-column">
        Add Penalty
        <AddToTimer Disabled="@Disabled" TimerAdditionType="@TimerAdditionType.Penalty" TimerData="@(() => new List<TeamTimerData>() { timerData })"/>
    </div>

    @if (ResumedRace) {
        <div class="d-flex flex-column">
            Add Previous Time
            <AddToTimer Disabled="@Disabled" Simplified="false" TimerAdditionType="@TimerAdditionType.Previous" TimerData="@(() => new List<TeamTimerData>() { timerData })"/>
        </div>
    }

        <ConfirmationModal @ref="ConfirmationModal"
        ActionDescription="Are you sure you want to DNF? This action is not reversible!"
        ActionRunnable="@(() => HandleDnf())"/>
</div>

@code {
    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public bool ResumedRace { get; set; }

    [Parameter]
    public TeamTimerData timerData { get; set; }

    private ConfirmationModal ConfirmationModal  { get; set; }

    /// <summary>
    /// Lambda to re-calculate the standings for all teams
    /// </summary>
    [Parameter]
    public Object TriggerStandingsCalculation { get; set; }

    public void HandleStart() {
        timerData.Start();
        ((Func<bool>)TriggerStandingsCalculation).Invoke();
    }

    public void HandleFinish() {
        timerData.Finish();
        ((Func<bool>)TriggerStandingsCalculation).Invoke();
    }

    public void HandleDnf() {
        timerData.confirmDNF();
        ((Func<bool>)TriggerStandingsCalculation).Invoke();
    }

}
