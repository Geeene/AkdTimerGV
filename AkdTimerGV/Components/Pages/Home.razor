@page "/timer/Home"
@page "/timer/"
@page "/"
@using AkdTimerGV.Components.Models
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using AkdTimerGV.Components.Custom
@using System.Security.Cryptography
@inject ProtectedLocalStorage BrowserStorage
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject ILogger<Home> Logger

@*
    The HTML For the Actual Page
*@

<PageTitle>Home</PageTitle>
<h2>Create a Lobby</h2>
<div class="form-group">
    <table>
        <tr>
            <td>Name of the Lobby:</td>
            <td><input type="text" required="true" @bind="lobbyId" /></td>
        </tr>
        <tr>
            <td>Username</td>
            <td><input type="text" required="true" @bind="userName" /></td>
        </tr>
        <tr>
            <td>Lobby Password</td>
            <td><input type="text" required="true" @bind="password" /></td>
        </tr>
    </table>
</div>

<input type="button" class="btn btn-primary" onclick="@createLobby" value="Create Lobby" />

<hr/>

<h2>Open Lobbies</h2>

<table class="table">
    <thead>
        <tr>
            <th>Lobby Name</th>
            <th>Lobby Owner</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var lobby in lobbies)
        {
            <tr>
                <td>@lobby.Description</td>
                <td>@lobby.Owner.Name</td>
                <td><input type="button" class="btn btn-primary" value="Join Lobby" onclick="@(() => showModalToJoinLobby(lobby))"/> </td>
            </tr>
        }
    </tbody>
</table>

@*
    The HTML for the Modal Dialog
*@

<ModalDialog @ref="@ModalDialog">
    Name: <input type="text" @bind="modalDialogUserName" required="true"/><br />
    Password: <input type="text" @bind="modalDialogPassword"/><br/>
    <input type="button" value="Confirm" @onclick="() => joinLobby()"/>
</ModalDialog>

<ConfirmationModal @ref="@ConfirmationModal" 
    ActionDescription="A user with the chosen name already exists, are you sure you want to chose that name?"
    ActionRunnable="@(() => JoinLobbyWhileReusingName())"
    />

@code {
    private string? lobbyId;
    private string? userName;
    private string? password;
    private List<Lobby> lobbies = LobbyHolder.getLobbies();
    private ModalDialog ModalDialog { get; set; }
    private ConfirmationModal ConfirmationModal { get; set; }
    private Lobby? lobbyToJoin;
    private User? UserWithNameInLobby;

    private string? modalDialogUserName;
    private string? modalDialogPassword;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            try {
                var storedUser = await BrowserStorage.GetAsync<Guid?>("user");
            } catch (CryptographicException e) {
                Logger.LogError("Ran into a cryptography Exception, deleting local storage. Probably Key is invalid due to re-deploy");
                await BrowserStorage.DeleteAsync("user");
                await BrowserStorage.DeleteAsync("currentLobby");
            }
        }
    }


    public async void createLobby() {
        if (lobbyId == null || userName == null) {
            Logger.LogInformation("necessary information for lobby creation not filled");
            return;
        }

        User currentUser = await getOrCreateUserInLocalStorage(userName);
        Lobby lobby = LobbyHolder.createLobby(lobbyId, currentUser, password);
        await handleMovingUserToLobby(currentUser, password, lobby);
    }

    /// <summary>
    /// The App stores the Userinformation (Guid + Name) in the Browsers Local storage.
    /// If the info is already saved in there, then we just grab it, and make sure to update the user name.
    /// If it is not there already, then we will save it instead.
    /// </summary>
    /// <param name="userName"></param>
    /// <returns></returns>
    public async Task<User> getOrCreateUserInLocalStorage(String userName) {
        if (userName == null) {
            throw new Exception("UserName must not be null");
        }

        var storedUser = await BrowserStorage.GetAsync<Guid?>("user");
        if ((!storedUser.Success || storedUser.Value == null)) {
            Logger.LogInformation("Need to create a new user, as nothing was stored");
            User createdUser = UserHolder.createUser(userName);
            await BrowserStorage.SetAsync("user", createdUser.UserId);
            return createdUser;
        } else {
            Logger.LogInformation("User exists in local storage {}", storedUser.Value);
            User? currentUser = UserHolder.GetUserById((Guid) storedUser.Value);

            // If there was a user cached, but that user no longer exists in memory, 
            // then delete the Guid from local storage and re-call the method so a new user is created.
            if (currentUser == null && userName != null) {
                await BrowserStorage.DeleteAsync("user");
                return await getOrCreateUserInLocalStorage(userName);
            }

            return currentUser;
        }
    }

    public async Task showModalToJoinLobby(Lobby lobby) {
        var storedUser = await BrowserStorage.GetAsync<Guid?>("user");
        if (storedUser.Value != null) {
            User? currentUser = UserHolder.GetUserById((Guid) storedUser.Value);

            // User was already in the lobby previously, just skip past the modal dialog
            if (currentUser != null && lobby.IsUserInLobby(currentUser)) {
                await handleMovingUserToLobby(currentUser, lobby.Password, lobby);
                return;
            }
        }

        lobbyToJoin = lobby;
        ModalDialog.showDialog();
    }


    public async void joinLobby() {
        if (modalDialogUserName == null || lobbyToJoin == null) {
            return;
        }

        UserWithNameInLobby = lobbyToJoin.GetUserWithName(modalDialogUserName);
        if (UserWithNameInLobby != null) {
            ConfirmationModal.showDialog();
            StateHasChanged();
            return;
        }


        User currentUser = await getOrCreateUserInLocalStorage(modalDialogUserName);
        if (await handleMovingUserToLobby(currentUser, modalDialogPassword, lobbyToJoin)) {
            ModalDialog.closeDialog();
            StateHasChanged();
        }
    }

    public async void JoinLobbyWhileReusingName() {
        if (UserWithNameInLobby == null || lobbyToJoin == null) {
            return;
        }

        await BrowserStorage.SetAsync("user", UserWithNameInLobby.UserId);
        await handleMovingUserToLobby(UserWithNameInLobby, lobbyToJoin.Password, lobbyToJoin);
    }

    public async Task<bool> handleMovingUserToLobby(User user, string? password, Lobby lobby) {
        if (lobby.TryJoinLobby(user, password)) {
            await BrowserStorage.SetAsync("currentLobby", lobby.LobbyId);
            NavigationManager.NavigateTo("timer/lobby");
            StateHasChanged();
            return true;
        }
        return false;
    }

    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
    public bool isPasswordRequired() {
        return lobbyToJoin != null && lobbyToJoin.Password != null;
    }
}